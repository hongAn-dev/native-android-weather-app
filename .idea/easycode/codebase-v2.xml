<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/weatherapp/ExampleInstrumentedTest.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/data/auth/AuthRepoImpl.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/data/auth/AuthRepository.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/data/local/WeatherDAO.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/data/local/WeatherDatabase.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/data/local/WeatherEntity.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepoImpl.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepository.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/di/AuthModule.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/di/DatabaseModule.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/di/RepositoryModule.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/screens/login/FakeViewModel.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginScreen.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginUiState.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginViewModel.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/screens/WeatherUiState.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/screens/WeatherViewModel.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/theme/Color.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/theme/Theme.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/ui/theme/Type.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/google-services.json;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/MainActivity.kt;D:/Projects/WeatherApp/app/src/main/java/com/example/weatherapp/MyWeatherApp.kt;D:/Projects/WeatherApp/app/src/test/java/com/example/weatherapp/ExampleUnitTest.kt;D:/Projects/WeatherApp/app/build.gradle.kts;D:/Projects/WeatherApp/app/google-services.json;D:/Projects/WeatherApp/build.gradle.kts;D:/Projects/WeatherApp/settings.gradle.kts" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;D:/Projects/WeatherApp&quot;:&quot;{\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/location/LocationScreen.kt\&quot;:\&quot;This file contains a Composable function `LocationScreen` that displays a screen for managing the user\\u0027s location preferences, including searching for and adding new locations, displaying the current weather for saved locations, and providing navigation to the home screen for each location.\\n\\n`LocationScreen`: Displays a screen for managing the user\\u0027s location preferences, including searching for and adding new locations, displaying the current weather for saved locations, and providing navigation to the home screen for each location.\\n\\n`LocationWeatherItem`: Displays a weather information card for a specific location, including the city name, current time, weather condition, temperature, and high/low temperatures.\\n\\n`getCurrentTimeForCity`: Calculates the current time for a given timezone offset.\&quot;,\&quot;/app/google-services.json\&quot;:\&quot;This file appears to be a JSON configuration file for a Firebase project. It does not contain any classes or functions, but rather provides information about the project, including the project number, project ID, storage bucket, and client information for two different Android applications.\\n\\nThe file serves the following purposes:\\n\\n1. It defines the project-level information, such as the project number, project ID, and storage bucket.\\n2. It provides client-level information for two different Android applications, including the mobile SDK app ID, package name, and API key.\\n3. It specifies the configuration version for the Firebase project.\\n\\nThis configuration file is likely used by a Firebase-based application to connect to the appropriate Firebase services and resources.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherEntity.kt\&quot;:\&quot;This file defines a single data class `WeatherEntity` that represents a weather data point, which is used for storing weather information in a Room database.\\n\\n`WeatherEntity`: A data class that represents a weather data point, including the city, temperature, description, icon, and timestamp.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepoImpl.kt\&quot;:\&quot;This file is a Kotlin implementation of a `WeatherRepository` interface, which is responsible for managing the retrieval and storage of weather data from both a local database and a remote API.\\n\\n`WeatherRepoImpl`: A class that implements the `WeatherRepository` interface, providing the necessary functionality to interact with the local database and the remote API.\\n\\n`getCachedWeather()`: Retrieves the latest weather data from the local database.\\n`saveWeather(weather: WeatherEntity)`: Saves the provided weather data to the local database.\\n`clearWeather()`: Clears all the weather data from the local database.\\n`fetchWeatherFromApi(city: String)`: Fetches the weather forecast for the specified city from the remote API.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/WeatherViewModel.kt\&quot;:\&quot;`WeatherViewModel`: A ViewModel class that manages the state of the weather data and interacts with the `WeatherRepository` to load and save weather information.\\n\\n`loadCachedWeather()`: Loads the cached weather data from the repository and updates the UI state accordingly.\\n\\n`saveWeather(WeatherEntity)`: Saves the provided weather data to the repository and updates the UI state to reflect the successful save.\\n\\nThis file defines a ViewModel class that is responsible for managing the state of the weather data in the application. It interacts with a `WeatherRepository` to load and save weather information, and updates the UI state accordingly.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/di/AuthModule.kt\&quot;:\&quot;This file is a Dagger Hilt module that provides dependencies for the authentication-related components of the Weather App.\\n\\n`AuthModule`: A Dagger Hilt module that provides singleton instances of `FirebaseAuth` and `AuthRepository`.\\n\\n`provideFirebaseAuth()`: A function that provides a singleton instance of `FirebaseAuth`.\\n\\n`provideAuthRepository()`: A function that provides a singleton instance of `AuthRepository` implementation.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/nav/Screen.kt\&quot;:\&quot;This file defines a sealed class `Screen` that represents the different screens or routes in a weather app. Each screen is represented by a sealed class that extends the `Screen` class and has a specific route associated with it.\\n\\n`Screen`: A sealed class that represents the different screens or routes in the weather app.\\n\\n`Login`: A screen for the login functionality.\\n\\n`SignUp`: A screen for the sign-up functionality.\\n\\n`Home`: A screen for the home page, which displays the weather information for a specific city. The `createRoute` function generates the route for this screen with the city parameter.\\n\\n`Detail`: A screen for the detailed weather information for a specific city. The `createRoute` function generates the route for this screen with the city parameter.\\n\\n`Location`: A screen for the location functionality.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/utils/WeatherMapper.kt\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`toWeatherEntity()`: This function takes a `ForecastResponse` object and converts it into a `WeatherEntity` object, which contains information about the current weather, such as the city name, temperature, description, and icon.\\n\\nThe file appears to be a utility file that provides a function to convert a `ForecastResponse` object, which likely represents weather data from an API, into a `WeatherEntity` object, which can be used in the application\\u0027s data layer.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/google-services.json\&quot;:\&quot;This file appears to be a JSON configuration file for a Firebase project. It does not contain any classes or functions, but rather provides information about the project, including the project number, project ID, storage bucket, and client information for two different Android applications.\\n\\nThe file serves the following purposes:\\n\\n1. Defines the project information, including the project number, project ID, and storage bucket.\\n2. Provides client information for two Android applications, including the mobile SDK app ID, package name, and API key.\\n3. Configures the Firebase services, such as the app invite service, for the two Android applications.\\n\\nThis configuration file is likely used by a Firebase-based application to set up the necessary project and client information for authentication, storage, and other Firebase services.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/di/RepositoryModule.kt\&quot;:\&quot;This file is a Dagger Hilt module that provides a binding for the `WeatherRepository` interface. It does this by binding the `WeatherRepoImpl` implementation to the `WeatherRepository` interface.\\n\\n`RepositoryModule`: A Dagger Hilt module that provides a binding for the `WeatherRepository` interface.\\n\\n`bindWeatherRepository`: A Dagger Hilt binding function that binds the `WeatherRepoImpl` implementation to the `WeatherRepository` interface.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/auth/AuthRepoImpl.kt\&quot;:\&quot;This file contains an implementation of the `AuthRepository` interface, which provides methods for user authentication using Firebase Authentication.\\n\\n`AuthRepoImpl`: An implementation of the `AuthRepository` interface that handles user authentication using Firebase Authentication.\\n\\n`login`: Logs in a user with the provided email and password, returning a `Result` object indicating success or failure.\\n\\n`signUp`: Creates a new user account with the provided email and password, returning a `Result` object indicating success or failure.\\n\\n`isLoggedIn`: Checks if the current user is logged in by checking if the `FirebaseAuth.currentUser` is not null.\\n\\n`logout`: Signs out the current user by calling `FirebaseAuth.signOut()`.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/utils/FusedLocationProviderClient.kt\&quot;:\&quot;This file contains a single class and one function:\\n\\n`FusedLocationProviderClient`: A utility class that provides a way to get the current location of the device using the Google Play Services Location API.\\n\\n`getCurrentLocation`: A function that retrieves the current location of the device, checking for the necessary permissions first. If the permissions are granted, it returns the location; otherwise, it returns `null`.\\n\\nThe purpose of this file is to provide a convenient way to access the user\\u0027s current location in an Android app, handling the necessary permission checks and using the Google Play Services Location API to retrieve the location data.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/detail/DetailScreen.kt\&quot;:\&quot;This file contains a single Composable function `DetailScreen` that displays the weather forecast for a specific city. Here\\u0027s a summary of the file:\\n\\n`DetailScreen`: This function displays the weather forecast for a specific city, including the current weather, tomorrow\\u0027s weather, and a 5-day forecast. It also includes a back button and handles loading and error states.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Theme.kt\&quot;:\&quot;This file defines the theme for the Weather App using Jetpack Compose. It includes the following classes and functions:\\n\\n`DarkColorScheme`: Defines the dark color scheme for the app.\\n\\n`LightColorScheme`: Defines the light color scheme for the app.\\n\\n`WeatherAppTheme`: Composable function that sets the theme for the app based on the system\\u0027s dark mode setting and the device\\u0027s Android version.\\n\\nThe file also imports various classes and functions from the Jetpack Compose Material 3 library to handle the dynamic color scheme and other theme-related settings.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/remote/WeatherApiService.kt\&quot;:\&quot;This file defines an interface called `WeatherApiService` that provides methods for interacting with a weather API.\\n\\n`WeatherApiService`: An interface that defines the API endpoints and methods for fetching weather forecast data and searching for cities.\\n\\n`getForecast`: A suspend function that retrieves the weather forecast for a given city using the specified API key and units.\\n\\n`searchCity`: A suspend function that searches for a city by name and returns a list of `CitySearch` objects, with a limit on the number of results.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/nav/NavHost.kt\&quot;:\&quot;This file defines the navigation graph for a weather app using Jetpack Compose. It sets up the navigation routes and composables for the different screens in the app.\\n\\n`WeatherNavGraph`: Defines the navigation graph for the weather app, including the login, sign-up, home, detail, and location screens.\\n\\n`LoginScreen`: Handles the login functionality and navigation to the home screen.\\n\\n`SignUpScreen`: Handles the sign-up functionality and navigation back to the login screen.\\n\\n`HomeScreen`: Displays the weather information for a specific city and provides navigation to the detail screen.\\n\\n`DetailScreen`: Displays detailed weather information for a specific city and provides navigation back to the home screen.\\n\\n`LocationScreen`: Handles the location-related functionality and navigation.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Type.kt\&quot;:\&quot;This file defines the typography styles for a Weather App using Jetpack Compose. It sets the default text style for the `bodyLarge` component, and provides commented-out examples for other text styles such as `titleLarge` and `labelSmall`.\\n\\n`Typography`: Defines the set of Material typography styles to be used in the Weather App.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/di/DatabaseModule.kt\&quot;:\&quot;This file is a Dagger Hilt module that provides dependencies for a Room database used in a weather app.\\n\\n`DatabaseModule`: A Dagger Hilt module that provides dependencies for the WeatherDatabase and WeatherDAO.\\n\\n`provideDatabase`: Provides an instance of the WeatherDatabase using Room.\\n\\n`provideWeatherDAO`: Provides an instance of the WeatherDAO from the WeatherDatabase.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/local/CityPreferences.kt\&quot;:\&quot;This file contains a single class `CityPreferences` that manages the storage and retrieval of city names in the application\\u0027s shared preferences.\\n\\n`CityPreferences`: A class that handles the storage and retrieval of city names in the application\\u0027s shared preferences.\\n\\n`saveCities(cities: List\\u003cString\\u003e)`: Saves a list of city names to the shared preferences.\\n\\n`getSavedCities(): List\\u003cString\\u003e`: Retrieves the list of saved city names from the shared preferences.\\n\\n`deleteCity(city: String)`: Removes a city from the list of saved city names in the shared preferences.\\n\\n`saveCurrentCity(city: String)`: Saves the current city name (e.g., from GPS location) to the shared preferences.\\n\\n`getCurrentCity(): String?`: Retrieves the current city name from the shared preferences.\\n\\n`logAllCities()`: Logs the list of saved city names to the console for debugging purposes.\\n\\n`normalizeCityName(name: String): String`: Normalizes the city name by trimming, converting to lowercase, and removing extra whitespace.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginScreen.kt\&quot;:\&quot;This file contains a Composable function `LoginScreen` that represents the login screen of a weather app. Here\\u0027s a summary of the classes and functions in the file:\\n\\n`LoginScreen`: This Composable function represents the login screen of the weather app, allowing users to log in with their email and password, and optionally sign up for a new account.\\n\\n`rememberLauncherForActivityResult`: This function is used to request location permissions from the user and handle the result.\\n\\n`getCurrentLocation`: This function is used to get the current location of the user and update the user\\u0027s preferred city in the app\\u0027s preferences.\\n\\n`getCityNameFromLocation`: This function is used to get the city name based on the user\\u0027s location coordinates.\\n\\nOverall, this file is responsible for the implementation of the login screen in the weather app, including handling user input, location permissions, and updating the user\\u0027s preferred city.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/auth/AuthRepository.kt\&quot;:\&quot;This file defines an `AuthRepository` interface, which provides the following functions:\\n\\n`AuthRepository`: An interface that defines the contract for authentication-related operations, such as login, logout, checking login status, and sign-up.\\n\\n`login(email: String, password: String)`: Logs in a user with the provided email and password, returning a `Result\\u003cUnit\\u003e` to indicate success or failure.\\n\\n`logout()`: Logs out the currently logged-in user.\\n\\n`isLoggedIn()`: Checks whether a user is currently logged in.\\n\\n`signUp(email: String, password: String)`: Registers a new user with the provided email and password, returning a `Result\\u003cUnit\\u003e` to indicate success or failure.\&quot;,\&quot;/settings.gradle.kts\&quot;:\&quot;This file is a Gradle configuration file for an Android project called \\\&quot;WeatherApp\\\&quot;. It does not contain any classes or functions, but rather configures the project\\u0027s dependency management and plugin management settings.\\n\\n`pluginManagement`: Configures the repositories to be used for resolving Gradle plugins, including the Gradle Plugin Portal, Google\\u0027s Maven repository, and Maven Central.\\n\\n`dependencyResolutionManagement`: Configures the repositories to be used for resolving project dependencies, including the Gradle Plugin Portal, Google\\u0027s Maven repository, and Maven Central. It also sets the repositories mode to `FAIL_ON_PROJECT_REPOS`, which means that the build will fail if any project-specific repositories are defined.\\n\\n`rootProject.name`: Sets the name of the root project to \\\&quot;WeatherApp\\\&quot;.\\n\\n`include(\\\&quot;:app\\\&quot;)`: Includes the \\\&quot;:app\\\&quot; module in the project.\&quot;,\&quot;/app/src/androidTest/java/com/example/weatherapp/ExampleInstrumentedTest.kt\&quot;:\&quot;This file contains an instrumented test for the \\\&quot;WeatherApp\\\&quot; Android application. It does not contain any classes or functions, but rather a single test case that checks if the application\\u0027s package name matches the expected value.\\n\\nThe file can be summarized as follows:\\n\\n`ExampleInstrumentedTest`: This is an instrumented test class that runs on an Android device and tests the application\\u0027s context.\\n\\n`useAppContext()`: This test function checks if the application\\u0027s package name matches the expected value, which is \\\&quot;com.example.weatherapp\\\&quot;.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/home/HomeViewModel.kt\&quot;:\&quot;This file contains a single class, `HomeViewModel`, which is a ViewModel class for the home screen of a weather app. The file also contains several functions that handle the loading, saving, and management of weather data, as well as the search functionality for cities.\\n\\n`HomeViewModel`: A ViewModel class that manages the state and logic for the home screen of a weather app.\\n\\n`loadWeather(city: String)`: Fetches the weather forecast for a given city from the API, saves the weather data, and updates the state accordingly.\\n\\n`addCityByName(cityName: String)`: Adds a new city to the list of cities being tracked, fetching the weather data for the new city.\\n\\n`removeCityByName(cityName: String)`: Removes a city from the list of cities being tracked.\\n\\n`searchCity(query: String)`: Searches for cities based on the provided query and updates the suggestions state accordingly.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/MainActivity.kt\&quot;:\&quot;This file is the main entry point for the Weather App Android application. It sets up the UI and navigation for the app using Jetpack Compose.\\n\\n`MainActivity`: The main activity class that sets up the Compose-based UI and navigation for the Weather App.\\n\\n`onCreate`: The function that is called when the activity is created, where the Compose-based UI and navigation are set up.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/detail/DetailViewModel.kt\&quot;:\&quot;This file contains a single class:\\n\\n`DetailViewModel`: A ViewModel class that is responsible for handling the logic and data for the weather detail screen in the WeatherApp.\\n\\nThe file does not contain any functions. Instead, it sets up the `DetailViewModel` class using Dagger Hilt for dependency injection, with a `WeatherRepository` instance injected into the ViewModel.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepository.kt\&quot;:\&quot;This file defines an interface called `WeatherRepository` that provides methods for interacting with weather data. The interface has the following methods:\\n\\n`getCachedWeather()`: Retrieves the cached weather data.\\n`saveWeather(weather: WeatherEntity)`: Saves the provided weather data.\\n`clearWeather()`: Clears the cached weather data.\\n`fetchWeatherFromApi(city: String)`: Fetches weather data from an API for the specified city.\\n\\nThe purpose of this file is to define the contract for a weather repository, which can be implemented by different data sources (e.g., local database, remote API) to provide weather data to the application.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginViewModel.kt\&quot;:\&quot;`LoginViewModel`: A ViewModel class that handles the login functionality of the Weather App.\\n\\n`login`: Attempts to log in the user with the provided email and password, and retrieves the user\\u0027s city name.\\n\\n`getCityNameFromLocation`: Retrieves the city name based on the provided latitude and longitude coordinates.\\n\\nThis file contains a ViewModel class that handles the login functionality of the Weather App. It includes methods to log in the user, retrieve the user\\u0027s city name based on their location, and manage the UI state during the login process.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/home/HomeScreen.kt\&quot;:\&quot;This file contains a Compose-based UI for a weather app, including the following classes and functions:\\n\\n`HomeScreen`: A composable function that displays the home screen of the weather app, including the current weather, hourly forecast, and navigation options.\\n\\n`CurrentWeatherSection`: A composable function that displays the current weather information, including the temperature, weather condition, and additional details.\\n\\n`WeatherInfoItem`: A composable function that displays a single weather information item, such as rain, wind, or humidity.\\n\\n`HourlyForecastSection`: A composable function that displays the hourly forecast for the next 24 hours.\\n\\n`getCurrentTimeForCity`: A function that formats the current time for a given timezone offset.\\n\\nOverall, this file provides the UI implementation for the home screen of the weather app, including the display of current weather conditions and the hourly forecast.\&quot;,\&quot;/app/build.gradle.kts\&quot;:\&quot;This file is a Gradle build script for an Android application. It sets up the project configuration, dependencies, and plugins required for the application. Here\\u0027s a summary of the main elements in the file:\\n\\n`plugins`: Applies various Gradle plugins to the project, including the Kotlin plugin, Android application plugin, Hilt plugin, and Google Play Services plugin.\\n\\n`hilt`: Configures the Hilt dependency injection framework, disabling the aggregating task.\\n\\n`configurations.all`: Ensures that the Kotlin version used in the project is 1.9.0.\\n\\n`android`: Configures the Android-specific settings, such as the namespace, compile and target SDK versions, default app settings, and build types.\\n\\n`dependencies`: Specifies the external libraries and frameworks used in the project, including Android Jetpack components, Hilt, Room, Retrofit, Coil, and Firebase.\\n\\nThis file does not contain any explicit class or function definitions. It is a configuration file that sets up the build environment and dependencies for the Android application.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/signup/SignUpViewModel.kt\&quot;:\&quot;`SignUpViewModel`: A ViewModel class that handles the sign-up process and email verification for the Weather App.\\n\\n`signUp`: Performs the sign-up process using the AuthRepository and sends an email verification to the user.\\n\\n`checkEmailVerify`: Checks if the user\\u0027s email is verified and calls the appropriate callback function.\\n\\nThis file contains a ViewModel class that is responsible for handling the sign-up process and email verification for the Weather App. The `SignUpViewModel` class interacts with the `AuthRepository` to perform the sign-up operation and send an email verification to the user. It also provides a function to check if the user\\u0027s email is verified and calls the appropriate callback function based on the verification status.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/model/CitySearch.kt\&quot;:\&quot;This file contains a single data class:\\n\\n`CitySearch`: A data class that represents a city with its name, country, latitude, and longitude.\\n\\nThis file does not contain any functions. It simply defines a data class to represent the information about a city that can be used in a weather application.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Color.kt\&quot;:\&quot;This file defines the color palette for a weather app using Jetpack Compose. It does not contain any classes or functions, but rather defines a set of color values that can be used throughout the app\\u0027s user interface.\\n\\n`Purple80`: A dark purple color.\\n`PurpleGrey80`: A dark purple-grey color.\\n`Pink80`: A dark pink color.\\n`Purple40`: A lighter purple color.\\n`PurpleGrey40`: A lighter purple-grey color.\\n`Pink40`: A lighter pink color.\\n`backColor`: A light blue-purple color.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherDatabase.kt\&quot;:\&quot;This file defines a Room database for a weather application.\\n\\n`WeatherDatabase`: A Room database class that holds the `WeatherEntity` table and provides an abstract method to access the `WeatherDAO`.\\n\\n`weatherDAO()`: An abstract method that provides access to the data access object (DAO) for the `WeatherEntity` table.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherDAO.kt\&quot;:\&quot;This file contains a data access object (DAO) interface for a Room database, which is used to interact with a weather-related database table.\\n\\n`WeatherDAO`: An interface that defines the database operations for the weather-related data.\\n\\n`insertWeather`: Inserts a new `WeatherEntity` into the database, replacing any existing data with the same timestamp.\\n\\n`getLatestWeather`: Retrieves the most recent `WeatherEntity` from the database.\\n\\n`clearAll`: Deletes all `WeatherEntity` records from the database.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/data/model/ForecastResponse.kt\&quot;:\&quot;This file defines the data models for a weather app, including the response from a weather forecast API and the various data types that make up the response.\\n\\n`ForecastResponse`: Represents the overall response from the weather forecast API, containing information about the forecast, the city, and the list of forecast items.\\n\\n`ForecastItem`: Represents a single item in the weather forecast, containing information about the weather conditions, temperature, wind, and the date/time of the forecast.\\n\\n`CityWeather`: Represents the weather information for a specific city, including the city name and the forecast response.\\n\\n`Wind`: Represents the wind information, including the wind speed.\\n\\n`Main`: Represents the main weather information, including the temperature, humidity, and \\\&quot;feels like\\\&quot; temperature.\\n\\n`Weather`: Represents the weather conditions, including the weather ID, main description, detailed description, and the weather icon.\\n\\n`City`: Represents the city information, including the city name, coordinates, country, and timezone.\\n\\n`Coord`: Represents the geographical coordinates of a location, including the latitude and longitude.\&quot;,\&quot;/build.gradle.kts\&quot;:\&quot;This file is a top-level build file that sets up common configuration options for all sub-projects or modules in the Android application. It does not contain any classes or functions, but rather sets up the following plugins:\\n\\n`alias(libs.plugins.android.application)`: Applies the Android application plugin to all sub-projects.\\n`alias(libs.plugins.kotlin.android)`: Applies the Kotlin Android plugin to all sub-projects.\\n`id(\\\&quot;com.google.gms.google-services\\\&quot;)`: Applies the Google Services plugin to all sub-projects.\\n\\nThe purpose of this file is to centralize common configuration settings for the entire Android application, making it easier to manage and maintain the build process across multiple sub-projects or modules.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/di/NetWorkModule.kt\&quot;:\&quot;This file is a Dagger Hilt module that provides dependencies for a weather app. It contains the following classes and functions:\\n\\n`NetWorkModule`: A Dagger Hilt module that provides dependencies for the weather app\\u0027s network layer.\\n\\n`provideBaseUrl()`: Provides the base URL for the weather API.\\n\\n`provideRetrofit(BASE_URL:String)`: Provides a Retrofit instance with the specified base URL and a Gson converter factory.\\n\\n`provideWeatherApi(retrofit: Retrofit)`: Provides a WeatherApiService instance using the Retrofit instance.\\n\\nThis file sets up the necessary dependencies for the weather app\\u0027s network layer, including the Retrofit instance and the WeatherApiService interface, which can be used to make API calls to the weather service.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/MyWeatherApp.kt\&quot;:\&quot;This file contains a single class:\\n\\n`MyWeatherApp`: This class extends the `Application` class and is annotated with `@HiltAndroidApp`, which is a Dagger Hilt annotation that enables dependency injection for the entire application.\\n\\nThis file sets up the main application class for the Weather App, which is necessary for Dagger Hilt to work correctly and provide dependency injection throughout the application.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/signup/SignUpScreen.kt\&quot;:\&quot;This file contains a Composable function `SignUpScreen` that represents the sign-up screen of a weather app. It handles the user input for email and password, and provides functionality for signing up and verifying the user\\u0027s email.\\n\\n`SignUpScreen`: Composable function that displays the sign-up screen with input fields for email and password, and handles the sign-up and email verification process.\\n\\n`signUp`: Function in the `SignUpViewModel` that handles the sign-up process.\\n\\n`checkEmailVerify`: Function in the `SignUpViewModel` that checks if the user has verified their email and performs the necessary actions.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/WeatherUiState.kt\&quot;:\&quot;This file defines a sealed class `WeatherUiState` that represents the different states of the UI in a weather app. It has four subclasses:\\n\\n`WeatherUiState`: A sealed class that represents the different states of the UI in a weather app.\\n\\n`WeatherUiState.Loading`: Represents the state when the app is loading data.\\n`WeatherUiState.Success`: Represents the state when the app has successfully loaded weather data.\\n`WeatherUiState.Error`: Represents the state when the app has encountered an error while loading data.\\n`WeatherUiState.Empty`: Represents the state when the app has no data to display.\\n\\nThis file does not contain any functions, but rather defines the structure of the UI state for the weather app.\&quot;,\&quot;/app/src/test/java/com/example/weatherapp/ExampleUnitTest.kt\&quot;:\&quot;This file contains a single unit test class for the Weather App project. It does not contain any classes or functions, but rather a single test case that verifies the correctness of the addition operation.\\n\\n`ExampleUnitTest`: A unit test class that contains a single test case to verify the correctness of the addition operation.\\n\\n`addition_isCorrect()`: A test function that checks if the addition of 2 and 2 is equal to 4, which is the expected result.\&quot;,\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginUiState.kt\&quot;:\&quot;This file defines a sealed class `LoginUiState` that represents the different states of the login screen in a weather app.\\n\\n`LoginUiState`: A sealed class that represents the different states of the login screen, including Idle, Loading, Success, and Error.\\n\\n`Idle`: Represents the initial state of the login screen.\\n`Loading`: Represents the state when the login process is in progress.\\n`Success`: Represents the state when the login process is successful.\\n`Error`: Represents the state when the login process encounters an error, with a message describing the error.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;D:/Projects/WeatherApp&quot;:&quot;{\&quot;/app/src/androidTest/java/com/example/weatherapp/ExampleInstrumentedTest.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/androidTest/java/com/example/weatherapp/ExampleInstrumentedTest.kt\&quot;,\&quot;file_name\&quot;:\&quot;ExampleInstrumentedTest.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/auth/AuthRepoImpl.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/auth/AuthRepoImpl.kt\&quot;,\&quot;file_name\&quot;:\&quot;AuthRepoImpl.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/auth/AuthRepository.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/auth/AuthRepository.kt\&quot;,\&quot;file_name\&quot;:\&quot;AuthRepository.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/local/CityPreferences.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/local/CityPreferences.kt\&quot;,\&quot;file_name\&quot;:\&quot;CityPreferences.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherDAO.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherDAO.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherDAO.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherDatabase.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherDatabase.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherDatabase.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherEntity.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/local/WeatherEntity.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherEntity.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/model/CitySearch.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/model/CitySearch.kt\&quot;,\&quot;file_name\&quot;:\&quot;CitySearch.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/model/ForecastResponse.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/model/ForecastResponse.kt\&quot;,\&quot;file_name\&quot;:\&quot;ForecastResponse.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/remote/WeatherApiService.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/remote/WeatherApiService.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherApiService.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepoImpl.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepoImpl.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherRepoImpl.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepository.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/data/repository/WeatherRepository.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherRepository.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/di/AuthModule.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/di/AuthModule.kt\&quot;,\&quot;file_name\&quot;:\&quot;AuthModule.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/di/DatabaseModule.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/di/DatabaseModule.kt\&quot;,\&quot;file_name\&quot;:\&quot;DatabaseModule.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/di/NetWorkModule.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/di/NetWorkModule.kt\&quot;,\&quot;file_name\&quot;:\&quot;NetWorkModule.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/di/RepositoryModule.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/di/RepositoryModule.kt\&quot;,\&quot;file_name\&quot;:\&quot;RepositoryModule.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/nav/NavHost.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/nav/NavHost.kt\&quot;,\&quot;file_name\&quot;:\&quot;NavHost.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/nav/Screen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/nav/Screen.kt\&quot;,\&quot;file_name\&quot;:\&quot;Screen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/detail/DetailScreen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/detail/DetailScreen.kt\&quot;,\&quot;file_name\&quot;:\&quot;DetailScreen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/detail/DetailViewModel.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/detail/DetailViewModel.kt\&quot;,\&quot;file_name\&quot;:\&quot;DetailViewModel.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/home/HomeScreen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/home/HomeScreen.kt\&quot;,\&quot;file_name\&quot;:\&quot;HomeScreen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/home/HomeViewModel.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/home/HomeViewModel.kt\&quot;,\&quot;file_name\&quot;:\&quot;HomeViewModel.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/location/LocationScreen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/location/LocationScreen.kt\&quot;,\&quot;file_name\&quot;:\&quot;LocationScreen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginScreen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginScreen.kt\&quot;,\&quot;file_name\&quot;:\&quot;LoginScreen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginUiState.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginUiState.kt\&quot;,\&quot;file_name\&quot;:\&quot;LoginUiState.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginViewModel.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/login/LoginViewModel.kt\&quot;,\&quot;file_name\&quot;:\&quot;LoginViewModel.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/signup/SignUpScreen.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/signup/SignUpScreen.kt\&quot;,\&quot;file_name\&quot;:\&quot;SignUpScreen.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/signup/SignUpViewModel.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/signup/SignUpViewModel.kt\&quot;,\&quot;file_name\&quot;:\&quot;SignUpViewModel.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/WeatherUiState.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/WeatherUiState.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherUiState.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/WeatherViewModel.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/screens/WeatherViewModel.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherViewModel.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Color.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Color.kt\&quot;,\&quot;file_name\&quot;:\&quot;Color.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Theme.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Theme.kt\&quot;,\&quot;file_name\&quot;:\&quot;Theme.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Type.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/ui/theme/Type.kt\&quot;,\&quot;file_name\&quot;:\&quot;Type.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/utils/FusedLocationProviderClient.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/utils/FusedLocationProviderClient.kt\&quot;,\&quot;file_name\&quot;:\&quot;FusedLocationProviderClient.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/utils/WeatherMapper.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/utils/WeatherMapper.kt\&quot;,\&quot;file_name\&quot;:\&quot;WeatherMapper.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/google-services.json\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/google-services.json\&quot;,\&quot;file_name\&quot;:\&quot;google-services.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/MainActivity.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/MainActivity.kt\&quot;,\&quot;file_name\&quot;:\&quot;MainActivity.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/main/java/com/example/weatherapp/MyWeatherApp.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/main/java/com/example/weatherapp/MyWeatherApp.kt\&quot;,\&quot;file_name\&quot;:\&quot;MyWeatherApp.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/src/test/java/com/example/weatherapp/ExampleUnitTest.kt\&quot;:{\&quot;file_path\&quot;:\&quot;/app/src/test/java/com/example/weatherapp/ExampleUnitTest.kt\&quot;,\&quot;file_name\&quot;:\&quot;ExampleUnitTest.kt\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/build.gradle.kts\&quot;:{\&quot;file_path\&quot;:\&quot;/app/build.gradle.kts\&quot;,\&quot;file_name\&quot;:\&quot;build.gradle.kts\&quot;,\&quot;methods\&quot;:[]},\&quot;/app/google-services.json\&quot;:{\&quot;file_path\&quot;:\&quot;/app/google-services.json\&quot;,\&quot;file_name\&quot;:\&quot;google-services.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/build.gradle.kts\&quot;:{\&quot;file_path\&quot;:\&quot;/build.gradle.kts\&quot;,\&quot;file_name\&quot;:\&quot;build.gradle.kts\&quot;,\&quot;methods\&quot;:[]},\&quot;/settings.gradle.kts\&quot;:{\&quot;file_path\&quot;:\&quot;/settings.gradle.kts\&quot;,\&quot;file_name\&quot;:\&quot;settings.gradle.kts\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>